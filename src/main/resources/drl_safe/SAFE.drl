// Implementaiton of SAFE in Drools Rule Language
package drl_safe

import java.util.Date
import java.util.ArrayList

declare SAFE
    investor: Person
    company: Company
    purchase_amount: Integer
    post_money_valuation_cap: Integer
    discount_rate: Double
    safe_result: SAFE_Result
    date_terminated: Date
    terminated: boolean
    safe_price: Double
    liquidity_price: Double
    conversion_price: Double
    conversion_amount: Double
    cash_out_amount: Integer
    terminating_event: RWEvent
 end

declare Person
    name: String
end

declare Company
    name: String
    preferred_share_price: Double
    capital_stock_issued: Integer
    converting_securities: Double
    issued_options: Integer
    promised_options: Integer
    unissued_options: Integer
    capitalization: Integer
    liquidity_capitalization: Integer
    events: ArrayList<RWEvent>
end

declare RWEvent
    type: RWEvent_Type
    date: Date
    safe_type: SAFE_Event_Type
    intended_to_qualify_tax_free: boolean
    security_holders_given_choice_of_form_and_amount: boolean
end

declare SAFE_Result
    investor_provides_documents: boolean
    investor_choice_form_and_amount: boolean
    board_may_reduce_cash_portion: boolean
    safe_operates_as_preferred_stock: boolean
    terminating_event: String
    cash_amount_due: Double
    safe_preferred_stock_due: Integer
end

declare enum SAFE_Event_Type
    LIQUIDITY_EVENT,
    DISSOLUTION_EVENT,
    EQUITY_FINANCING;
end

declare enum RWEvent_Type
    INITIAL_PUBLIC_OFFERING,
    DIRECT_LISTING,
    CHANGE_OF_CONTROL,
    VOLUNTARY_TERMINATION_OF_OPERATIONS,
    OTHER_LIQUIDATION_ETC,
    GENERAL_ASSIGNMENT_FOR_BENEFIT_OF_CREDITORS,
    BONA_FIDE_TRANSACTION;
end

// Rule to Create Data For Testing
rule "Test Scenario"
    agenda-group "start"
    when
        // Left empty so rule will always trigger.
    then
        // System.out.println("Creating test data.\n");
        Person investor_a = new Person();
        investor_a.setName("Investor A");
        Person investor_b = new Person();
        investor_b.setName("Investor B");
        Company company = new Company();
        company.setName("ABC Inc.");
        ArrayList<RWEvent> events = new ArrayList<RWEvent>();
        company.setEvents(events);
        SAFE investor_a_safe = new SAFE();
        investor_a_safe.setInvestor(investor_a);
        investor_a_safe.setCompany(company);
        investor_a_safe.setPurchase_amount(200000);
        investor_a_safe.setPost_money_valuation_cap(4000000);
        investor_a_safe.setDiscount_rate(1.0);
        SAFE investor_b_safe = new SAFE();
        investor_b_safe.setInvestor(investor_b);
        investor_b_safe.setCompany(company);
        investor_b_safe.setPurchase_amount(800000);
        investor_b_safe.setPost_money_valuation_cap(8000000);
        investor_b_safe.setDiscount_rate(1.0);
        company.setPreferred_share_price(1.1144);
        company.setCapital_stock_issued(9250000);
        company.setIssued_options(300000);
        company.setPromised_options(350000);
        company.setUnissued_options(100000);

        RWEvent event = new RWEvent();
        event.setType(RWEvent_Type.BONA_FIDE_TRANSACTION);
        company.getEvents().add(event);
        
        insert(company);
        insert(investor_a_safe);
        insert(investor_b_safe);
        insert(event);
end

// Note that this implementation assumes that all of the converting securities will be SAFEs in the database.

rule "converting equities"
    agenda-group "conversions"
    when
        s : SAFE( pmvc : post_money_valuation_cap, pa: purchase_amount )
        c : Company( cs : converting_securities ) from s.company
    then
        //System.out.println("Adding " + pa + " divided by " + pmvc + " or " + Double.valueOf(pa)/pmvc + " to converting securities, which is currently " + cs + ".");
        modify (c) {
            setConverting_securities(cs+(Double.valueOf(pa)/pmvc))
        }
end

// Section 1 (c)
// (c)	Dissolution Event.  If there is a Dissolution Event before the 
// termination of this Safe, the Investor will automatically be entitled 
// (subject to the liquidation priority set forth in Section 1(d) below) 
// to receive a portion of Proceeds equal to the Cash-Out Amount, due and 
// payable to the Investor immediately prior to the consummation of the 
// Dissolution Event.

rule "Dissolution Event"
    when
        e : RWEvent( safe_type == SAFE_Event_Type.DISSOLUTION_EVENT )
        c : Company( events contains e)
        s : SAFE( terminated == false, company == c, cash_out_amount != 0, co : cash_out_amount)
    then
        // System.out.println("Triggering Dissolution Event Rule.\n");
        SAFE_Result safe_result = new SAFE_Result();
        safe_result.setCash_amount_due(Double.valueOf(co));
        insert( safe_result ); // When adding elements to the database that you want to be able to modify, you must "insert"
        modify( s ) {
          setSafe_result(safe_result),
          setTerminated(true),
          setTerminating_event(e)
        }
end

// S 1(d) Liquidation Priority.  In a Liquidity Event or Dissolution Event, this Safe is intended to operate like standard non-participating Preferred Stock.
rule "Standard non-Participating Preferred Stock"
    agenda-group "post-terminate"
    when
        // The safe_event_type of the terminating event is liquidity or dissolution
        s : SAFE( terminated == true, terminating_event != null, safe_result != null, sr : safe_result)
        te : RWEvent( safe_type == SAFE_Event_Type.LIQUIDITY_EVENT  || safe_type == SAFE_Event_Type.DISSOLUTION_EVENT ) from s.terminating_event
    then
        //  System.out.println("Triggering Standard non-participating stock Rule.\n");
        // modify the safe_operates to true for the safe_result.
        modify( sr ){
            setSafe_operates_as_preferred_stock(true)
        }
end

// S 1 (a) Equity Financing. 
// If there is an Equity Financing before the termination of this Safe, on the initial closing of such Equity Financing, 
// this Safe will automatically convert into the number of shares of Safe Preferred Stock equal to the Purchase Amount 
// divided by the Conversion Price.

// // 	In connection with the automatic conversion of this Safe into shares of Safe Preferred Stock, the Investor will 
// execute and deliver to the Company all of the transaction documents related to the Equity Financing; provided, that 
// such documents (i) are the same documents to be entered into with the purchasers of Standard Preferred Stock, with 
// appropriate variations for the Safe Preferred Stock if applicable, and (ii) have customary exceptions to any drag-along 
// applicable to the Investor, including (without limitation) limited representations, warranties, liability and 
// indemnification obligations for the Investor.

rule "Equity Financing"
    when
        e : RWEvent( safe_type == SAFE_Event_Type.EQUITY_FINANCING )
        c : Company( events contains e)
        s : SAFE( terminated == false, pa: purchase_amount, cp : conversion_price, company == c )
    then
        // System.out.println("Triggering Equity Financing Rule.\n");
        SAFE_Result safe_result = new SAFE_Result();
        safe_result.setSafe_preferred_stock_due((int)(pa/cp));
        safe_result.setInvestor_provides_documents(true);
        insert( safe_result ); // Before you can modify or update it, you must insert it.
        modify( s ) {
          setSafe_result(safe_result),
          setTerminated(true),
          setTerminating_event(e)
        }
end

// “Conversion Price” means the either: (1) the Safe Price or (2) the Discount Price, whichever calculation results in a greater number of shares of Safe Preferred Stock.

// “Discount Price” means the price per share of the Standard Preferred Stock sold in the Equity Financing multiplied by the Discount Rate. 

// Note that this definition is somewhat circular. It is simplified here to the safe price or the discount price, whichever is lower.

rule "Converstion Price"
    agenda-group "prices 2"
    when
        s : SAFE( dr : discount_rate, sp : safe_price, safe_price != 0.0) // 0.0 is being treated as "unknown", here, for testing purposes.
        c : Company( psp: preferred_share_price ) from s.company
    then
        // System.out.println("Triggering Conversion Price Rule.\n");
        Double discount_price = psp * dr;
        modify ( s ) {
            setConversion_price(Double.min(discount_price,sp))
        }
end

// (e)	Termination. This Safe will automatically terminate (without relieving the Company of any obligations arising from a 
// prior breach of or non-compliance with this Safe) immediately following the earliest to occur of: (i) the issuance of 
// Capital Stock to the Investor pursuant to the automatic conversion of this Safe under Section 1(a); or (ii) the payment, 
// or setting aside for payment, of amounts due the Investor pursuant to Section 1(b) or Section 1(c).

// TODO: See if there is a way to use complicated conditions and conclusions to combine these two rules into a single rule,
// without making it procedural. See the "do" syntax in the documentation.

rule "Termination Event Equity"
    agenda-group "post-terminate"
    when
        s : SAFE( )
        sr : SAFE_Result( ) from s.safe_result
        te : RWEvent( safe_type == SAFE_Event_Type.EQUITY_FINANCING ) from s.terminating_event
    then
        // System.out.println("Triggering termination event, equity.\n");
        modify( sr ) {
            setTerminating_event("Issuance of capital stock.");
        }
end

rule "Termination Event Liquidity and Dissolution"
    agenda-group "post-terminate"
    when
        s : SAFE( )
        sr : SAFE_Result( ) from s.safe_result
        te : RWEvent( safe_type == SAFE_Event_Type.LIQUIDITY_EVENT || safe_type == SAFE_Event_Type.DISSOLUTION_EVENT ) from s.terminating_event
    then
        // System.out.println("Triggering termination event, dissolution or liquidity.\n");
        modify ( sr ) {
            setTerminating_event("Payment or setting aside of payment.")
        }
end

// “Dissolution Event” means (i) a voluntary termination of operations, (ii) a general assignment 
// for the benefit of the Company’s creditors or (iii) any other liquidation, dissolution or winding 
// up of the Company (excluding a Liquidity Event), whether voluntary or involuntary.

rule "Dissolution Event Defined"
    agenda-group "pre-terminate"
    when
        e : RWEvent(
            type in (
                RWEvent_Type.VOLUNTARY_TERMINATION_OF_OPERATIONS,
                RWEvent_Type.GENERAL_ASSIGNMENT_FOR_BENEFIT_OF_CREDITORS,
                RWEvent_Type.OTHER_LIQUIDATION_ETC
            )
            //,
            //safe_type != SAFE_Event_Type.LIQUIDITY_EVENT // This may not work to cause backward chaining.
            // TODO: Figure out how to implement this requirement.
        )
    then
        // System.out.println("Triggering Dissolution Event Defined.\n");
        modify (e) {
            setSafe_type(SAFE_Event_Type.DISSOLUTION_EVENT)
        }
end

// “Equity Financing” means a bona fide transaction or series of transactions with the principal 
// purpose of raising capital, pursuant to which the Company issues and sells Preferred Stock at 
// a fixed valuation, including but not limited to, a pre-money or post-money valuation.

rule "Equity Finance Defined"
    agenda-group "pre-terminate"
    when
        e : RWEvent( type == RWEvent_Type.BONA_FIDE_TRANSACTION )
    then
        // System.out.println("Triggering Equity Finance Defined.\n");
        modify (e) {
            setSafe_type(SAFE_Event_Type.EQUITY_FINANCING)
        }
end

// “Liquidity Event” means a Change of Control, a Direct Listing or an Initial Public Offering. 

rule "Liquidity Event Defined"
    agenda-group "pre-terminate"
    when
        e : RWEvent( type in
            (
            RWEvent_Type.CHANGE_OF_CONTROL,
            RWEvent_Type.DIRECT_LISTING,
            RWEvent_Type.INITIAL_PUBLIC_OFFERING
            )
        )
    then
        // System.out.println("Triggering Liquidity Event Defined.\n");
        modify (e) {
            setSafe_type(SAFE_Event_Type.LIQUIDITY_EVENT)
        }
end

// “Liquidity Price” means the price per share equal to the Post-Money Valuation Cap divided by the Liquidity Capitalization.

rule "Liquidity Price"
    agenda-group "prices 1"
    when
        s : SAFE( pmvc: post_money_valuation_cap )
        c : Company( lc: liquidity_capitalization, liquidity_capitalization != 0) from s.company
    then
        // System.out.println("Triggering liquidity price calculation.\n");
        modify (s) {
            setLiquidity_price(Double.valueOf(pmvc)/lc)
        }
end

// “Safe Price” means the price per share equal to the Post-Money Valuation Cap divided by the Company Capitalization.

rule "Safe Price"
    agenda-group "prices 1"
    when
        s : SAFE( pmvc : post_money_valuation_cap )
        c : Company( cc : capitalization, capitalization != 0 ) from s.company
    then
        // System.out.println("Triggering Safe Price Calculation.\n");
        modify (s) {
            setSafe_price(Double.valueOf(pmvc)/cc)
        }
end

// (b)	Liquidity Event.  If there is a Liquidity Event before the termination of this Safe, this Safe will automatically 
// be entitled (subject to the liquidation priority set forth in Section 1(d) below) to receive a portion of Proceeds, 
// due and payable to the Investor immediately prior to, or concurrent with, the consummation of such Liquidity Event, equal 
// to the greater of (i) the Purchase Amount (the “Cash-Out Amount”) or (ii) the amount payable on the number of shares of 
// Common Stock equal to the Purchase Amount divided by the Liquidity Price (the “Conversion Amount”).

rule "Liquidity Event s1(b)"
    when
        e : RWEvent( safe_type == SAFE_Event_Type.LIQUIDITY_EVENT )
        c : Company( events contains e)
        s : SAFE( terminated == false, company == c, coa : cash_out_amount, cash_out_amount != 0, ca : conversion_amount, conversion_amount != 0.0)
    then
        // System.out.println("Triggering Liquidity Event results rule.\n");
        SAFE_Result safe_result = new SAFE_Result();
        safe_result.setCash_amount_due(Double.max(coa,ca));
        insert( safe_result ); // When adding elements to the database that you want to be able to modify, you must "insert"
        modify( s ) {
          setSafe_result(safe_result),
          setTerminated(true),
          setTerminating_event(e)
        }
end

rule "Cash out Amount"
    agenda-group "prices 2"
    when
        s : SAFE( pa: purchase_amount )
    then
        // System.out.println("Triggering Cash Out Amount Calculation.\n");
        modify (s) {
            setCash_out_amount(pa)
        }
end

rule "Conversion Amount"
    agenda-group "prices 2"
    when
        s : SAFE( pa: purchase_amount, lp : liquidity_price, liquidity_price != 0.0)
        c : Company( psp : preferred_share_price ) from s.company
    then
        // System.out.println("Triggering calculation of conversion amount.\n");
        modify (s) {
            setConversion_amount(psp*(Double.valueOf(pa)/lp))
        }
end

// If any of the Company’s 
// securityholders are given a choice as to the form and amount of Proceeds to be received in a Liquidity Event, the Investor 
// will be given the same choice, provided that the Investor may not choose to receive a form of consideration that the Investor 
// would be ineligible to receive as a result of the Investor’s failure to satisfy any requirement or limitation generally 
// applicable to the Company’s securityholders, or under any applicable laws.

rule "Liquidity Event Form and Amount"
    agenda-group "post-terminate"
    when
        s : SAFE( terminated == true, sr : safe_result )
        e : RWEvent( safe_type == SAFE_Event_Type.LIQUIDITY_EVENT, security_holders_given_choice_of_form_and_amount == true ) from s.terminating_event
    then
        // System.out.println("Triggering Liquidity Event Form and Amount Rule.\n");
        modify( sr ) {
          setInvestor_choice_form_and_amount(true)
        }
end

// Notwithstanding the foregoing, in connection with a Change of Control intended to qualify as a tax-free reorganization, 
// the Company may reduce the cash portion of Proceeds payable to the Investor by the amount determined by its board of 
// directors in good faith for such Change of Control to qualify as a tax-free reorganization for U.S. federal income tax 
// purposes, provided that such reduction (A) does not reduce the total Proceeds payable to such Investor and (B) is applied 
// in the same manner and on a pro rata basis to all securityholders who have equal priority to the Investor under Section 1(d).

rule "Liquidity Event Change of Control"
    agenda-group "post-terminate"
    when
        s : SAFE( terminated == true, sr : safe_result )
        e : RWEvent( safe_type == SAFE_Event_Type.LIQUIDITY_EVENT, intended_to_qualify_tax_free == true ) from s.terminating_event
    then
        // System.out.println("Triggering Liquidity Event Tax-Free Rule.\n");
        modify( sr ) {
          setBoard_may_reduce_cash_portion(true)
        }
end

// “Liquidity Capitalization” is calculated as of immediately prior to the Liquidity Event, and (without double- counting, in each case calculated on an as-converted to Common Stock basis): 
// •	Includes all shares of Capital Stock issued and outstanding;
// •	Includes all (i) issued and outstanding Options and (ii) to the extent receiving Proceeds, Promised Options;
// •	Includes all Converting Securities, other than any Safes and other convertible securities (including without limitation shares of Preferred Stock) where the holders of such securities are receiving Cash-Out Amounts or similar liquidation preference payments in lieu of Conversion Amounts or similar “as-converted” payments; and
// •	Excludes the Unissued Option Pool.

rule "Liquidity Capitalization"
    agenda-group "capitalization"
    when
        c : Company( csi : capital_stock_issued, io: issued_options, po: promised_options, cs: converting_securities )
    then
        // System.out.println("Triggering Liquidity Capitalization Calculation.\n");
        modify (c) {
            setLiquidity_capitalization((int)Math.floor((csi+io+po)/(1-cs)))
        }
end

// “Company Capitalization” is calculated as of immediately prior to the Equity Financing and (without double-counting, in each case calculated on an as-converted to Common Stock basis):
// •	Includes all shares of Capital Stock issued and outstanding;
// •	Includes all Converting Securities;
// •	Includes all (i) issued and outstanding Options and (ii) Promised Options; and
// •	Includes the Unissued Option Pool, except that any increase to the Unissued Option Pool in connection with the Equity Financing shall only be included to the extent that the number of Promised Options exceeds the Unissued Option Pool prior to such increase.

// Note that we are not implementing the "increased option pool rule" in the last bullet point.

rule "Company Capitalization"
    agenda-group "capitalization"
    when
        c : Company( csi : capital_stock_issued, io: issued_options, po: promised_options, cs: converting_securities, uo: unissued_options, capitalization == 0 )
    then
        // System.out.println("Triggering Company Capitalization Calculation.\n");
        modify (c) {
            setCapitalization((int)Math.floor((csi+io+po+uo)/(1-cs)))
        }
end

rule "Results"
    agenda-group "results"
    when
        s : SAFE( terminated == true )
        c : Company ( cn : name ) from s.company
        i : Person( pn : name ) from s.investor
        sr : SAFE_Result(   ipd : investor_provides_documents,
                            icfa : investor_choice_form_and_amount,
                            bmrcp : board_may_reduce_cash_portion,
                            sops : safe_operates_as_preferred_stock,
                            te : terminating_event,
                            cad : cash_amount_due,
                            spsd : safe_preferred_stock_due
                        ) from s.safe_result
    then
        System.out.println(pn + " purchased a safe from " + cn + ".");
        if (ipd){
            System.out.println(pn + " is obliged to provide documentation.");
        }
        if (icfa){
            System.out.println(pn + " is entitled to choose the form and amount of payment.");
        }
        if (bmrcp){
            System.out.println("The board of " + cn + " is entited to reduce the cash portion of the payment.");
        }
        if (sops){
            System.out.println("The safe operates as preferred stock.");
        }
        System.out.println(pn + " is entitled to " + cad + " in cash.");
        System.out.println(pn + " is entitled to " + spsd + " preferred stock.");
        System.out.println("These requirements will be met on: " + te + "\n\n");
end

query "SAFE Results"
    $safeResult : SAFE_Result()
    $safe : SAFE(safe_result == $safeResult)
end

query safeOfInvestor(String investorName)
    $safe : SAFE(investor.name == investorName)
    $issuedStock : Integer() from $safe.safe_result.safe_preferred_stock_due
end